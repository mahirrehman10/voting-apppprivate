pipeline{
  //agent any
  agent {label 'worker'}

  environment { 
    TASK_FAMILY='vote-app-c43-fargate'
    AWS_DEFAULT_REGION='us-east-1'
    ECS_CLUSTER='vote-app'
    SERVICE_NAME='vote'
  }

  options{
    buildDiscarder(logRotator(numToKeepStr: '15'))
    disableConcurrentBuilds()
    retry(2)
    timeout(time: 1, unit: 'MINUTES')
    timestamps()
  }
  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'which branch you want to deploy?')
    booleanParam(name: 'RUN_TEST_CASES', defaultValue: false, description: 'Run Test Cases')
    choice(name: 'ENVIRONMENT', choices: ['Dev', 'QA', 'Uat'], description: 'Pick Env')
  }
  stages{
    stage("Docker build and Push"){
      steps{
        sh'''
          cd vote
          docker build -t 584716546011.dkr.ecr.us-east-1.amazonaws.com/demo-c43:v${BUILD_NUMBER} .
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 584716546011.dkr.ecr.us-east-1.amazonaws.com
          docker push 584716546011.dkr.ecr.us-east-1.amazonaws.com/demo-c43:v${BUILD_NUMBER}
        '''
      }
    }
    stage("Docker Deploy"){
      steps{
        sh'''
          ECR_IMAGE=584716546011.dkr.ecr.us-east-1.amazonaws.com/demo-c43:v${BUILD_NUMBER}
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_FAMILY" --region "$AWS_DEFAULT_REGION")
          NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINTIION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
          aws ecs update-service --cluster ${ECS_CLUSTER} --region ${AWS_DEFAULT_REGION} --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${NEW_REVISION}
        '''
      }  
    }
    stage("Verification"){
      steps{
        sh "echo ecs describe service"
      } 
    }
    stage("Intesting Testing"){
      parallel{
        stage("Intesting Testing Linux"){
          steps{
            sh "echo Intesting Testing Linux"
            sh "sleep 60"
          } 
        }  
        stage("Intesting Testing Windows"){
          steps{
            sh "echo Intesting Testing Windows"
            sh "sleep 60"
          } 
        }   
        stage("Intesting Testing Mac"){
          steps{
            sh "echo Intesting Testing Mac"
            sh "sleep 60"
          } 
        }
      }
    }
  }
  post { 
    always { 
      echo 'I will always say Hello again!'
      slackSend(channel: "demo-c43", message: "Pipeline executed. Logs - (<${env.BUILD_URL}| Open Logs>)")
    }
  }
}
